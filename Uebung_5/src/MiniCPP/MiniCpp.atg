/* Attributed grammar for MiniCPP */
COMPILER MiniCPP

SEM<<
	private static int stc = 0;
	private static int mc  = 0;
>>


CHARACTER SETS
	digit		= '0' .. '9'.
	letter		= 'a' .. 'z' + 'A' .. 'Z' .
	whiteSpace	= CHR(9) + EOL IGNORE. /*' ' ignored by default*/
	noquote		= ANY - '"'.

COMMENTS
	FROM '//' TO EOL.
	FROM '/*' TO '*/'.

KEYWORDS
	'void'.  'new'. 'return'. 'const'. 'break'.
	'int'. 'false'. 'true'.  'bool'.
	'scanf'. 'printf'. 'cin'. 'cout'. 'endl'.
	'if'. 'while'.  'else'. 'for'. 'delete'.

TOKENS
	';'. ','.
	'='. '+'. '-'. '++'. '--'. '/'. '*'. '%'.
	'||'. '&&'. '<'. '>'. '<<'. '>>'. '<='. '>='. '=='. '!='. '!'.
	'('. ')'. '['. ']'. '{'. '}'.

TOKEN CLASSES
	number = digit { digit }.
	ident = ( letter | '_' ) { letter | digit | '_' }.
	string = '"' { noquote } '"'.

NONTERMINALS
	MiniCPP.
	ConstDecl.
	Init.
	VarDef.
	FuncHead.
	FormParList.
	Type.
	Block.
	Stat.
	Expr.
	Term.
	Fact.
	ActParList.
	IfStat.
	WhileStat.
	BreakStat.
	InputStat.
	OutputStat.
	DeleteStat.
	ReturnStat.
	OrExpr.
	AndExpr.
	RelExpr.
	SimpleExpr.
	NotFact.
	VarDefOrFuncDeclOrDef.
	FormParListRest.
	NonVoidType.
	IdentStat.

	RULES

		MiniCPP               = { ConstDecl | VarDefOrFuncDeclOrDef }
														SEM<<
																	Console.WriteLine($"Lines of code: {MiniCPPLex.tokenLine - 1}");
																  Console.WriteLine($"Lines of statements: {stc}");
																  Console.WriteLine($"Complexity by McCabe: {mc}");
														>>.
		VarDefOrFuncDeclOrDef = Type [ '*' ] ident (VarDef | FuncHead (';' | Block)) .
		ConstDecl             = 'const' Type ident Init ';'.
		Init                  = '=' ( false | true | number ) .
		VarDef                =	[ Init ] { ',' [ '*' ] ident [ Init ] } ';'.
		FuncHead              = '(' [ FormParList ] ')' .
		FormParList           =	( 'void' [ FormParListRest ] | NonVoidType FormParListRest ).
		FormParListRest       = [ '*' ] ident [ '[' ']' ] { ',' Type [ '*' ] ident [ '[' ']' ] } .
		Type                  = 'void' | NonVoidType .
		NonVoidType           = 'bool' | 'int' .
		Block                 =	'{' { ConstDecl | Type [ '*' ] ident VarDef | Stat } '}'.
		Stat                  = SEM<<stc++;>> ( IdentStat | IfStat | WhileStat | BreakStat | InputStat
		                        | OutputStat | DeleteStat | ReturnStat | Block | ';' ).
		IdentStat             =	ident ('++' | '--' | [ '[' Expr ']' ] '=' Expr | '(' [ ActParList ] ')') ';'.
		ActParList            = Expr { ',' Expr } .
		IfStat                = SEM<<mc++;>> 'if' '(' Expr ')' Stat [ 'else' Stat SEM<<mc++;>>].
		WhileStat             = SEM<<mc++;>> 'while' '(' Expr ')' Stat .
		BreakStat             = 'break' ';' .
		InputStat             = 'cin'  '>>' ident ';' .
		OutputStat            = 'cout' '<<' ( Expr | string | 'endl' ) { '<<' ( Expr | string | 'endl' ) } ';' .
		DeleteStat            = 'delete' '[' ']' ident ';' .
		ReturnStat            = 'return' [ Expr ] ';' .
		Expr                  =	OrExpr .
		OrExpr                = AndExpr { '||' AndExpr } .
		AndExpr               = RelExpr { '&&' RelExpr } .
		RelExpr               =	SimpleExpr [ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr ] .
		SimpleExpr            = [ '+' | '-' ] Term { ( '+' | '-' ) Term } .
		Term                  = NotFact { ( '*' | '/' | '%' )  NotFact } .
		NotFact               = [ '!' ] Fact .
		Fact                  = 'false'
		                        | 'true'
														| number
														| ident [ ( '[' Expr ']' )
														| ( '(' [ ActParList ] ')' ) ]
														| 'new' Type '[' Expr ']'
														| '(' Expr ')' .

	END MiniCPP.
