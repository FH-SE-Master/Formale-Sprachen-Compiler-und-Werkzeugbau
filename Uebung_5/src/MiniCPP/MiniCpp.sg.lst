Coco-2 SG (source: ..\MiniCPP\MiniCPP.atg)

    1| /* Attributed grammar for MiniCPP */
    2| COMPILER MiniCPP
    3| 
    4| SEM<<
    5| 	private static int loc = 0;
    6| 	private static int stc = 0;
    7| 	private static int mc  = 0;
    8| >>
    9| 
   10| 
   11| CHARACTER SETS
   12| 	digit		= '0' .. '9'.
   13| 	letter		= 'a' .. 'z' + 'A' .. 'Z' .
   14| 	whiteSpace	= CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   15| 	noquote		= ANY - '"'.
   16| 
   17| COMMENTS
   18| 	FROM '//' TO EOL.
   19| 	FROM '/*' TO '*/'.
   20| 
   21| KEYWORDS
   22| 	'void'.  'new'. 'return'. 'const'. 'break'.
   23| 	'int'. 'false'. 'true'.  'bool'.
   24| 	'scanf'. 'printf'. 'cin'. 'cout'. 'endl'.
   25| 	'if'. 'while'.  'else'. 'for'. 'delete'.
   26| 
   27| TOKENS
   28| 	';'. ','.
   29| 	'='. '+'. '-'. '++'. '--'. '/'. '*'. '%'.
   30| 	'||'. '&&'. '<'. '>'. '<<'. '>>'. '<='. '>='. '=='. '!='. '!'.
   31| 	'('. ')'. '['. ']'. '{'. '}'.
   32| 
   33| TOKEN CLASSES
   34| 	number = digit { digit }.
   35| 	ident = ( letter | '_' ) { letter | digit | '_' }.
   36| 	string = '"' { noquote } '"'.
   37| 
   38| NONTERMINALS
   39| 	MiniCPP.
   40| 	ConstDecl.
   41| 	Init.
   42| 	VarDef.
   43| 	FuncHead.
   44| 	FormParList.
   45| 	Type.
   46| 	Block.
   47| 	Stat.
   48| 	Expr.
   49| 	Term.
   50| 	Fact.
   51| 	ActParList.
   52| 	IfStat.
   53| 	WhileStat.
   54| 	BreakStat.
   55| 	InputStat.
   56| 	OutputStat.
   57| 	DeleteStat.
   58| 	ReturnStat.
   59| 	OrExpr.
   60| 	AndExpr.
   61| 	RelExpr.
   62| 	SimpleExpr.
   63| 	NotFact.
   64| 	VarDefOrFuncDeclOrDef.
   65| 	FormParListRest.
   66| 	NonVoidType.
   67| 	IdentStat.
   68| 
   69| 	RULES
   70| 
   71| 		MiniCPP               = { ConstDecl | VarDefOrFuncDeclOrDef }
   72| 														SEM<<
   73| 																	Console.WriteLine($"Lines of code: {loc}");
   74| 																  Console.WriteLine($"Lines of statements: {stc}");
   75| 																  Console.WriteLine($"Complexity by McCabe: {mc}");
   76| 														>>.
   77| 		VarDefOrFuncDeclOrDef = Type [ '*' ] ident (VarDef | FuncHead (';' | Block) SEM<<loc++;>>) .
   78| 		ConstDecl             = 'const' Type ident Init ';' SEM<<loc++;>> .
   79| 		Init                  = '=' ( false | true | number ) .
   80| 		VarDef                =	[ Init ] { ',' [ '*' ] ident [ Init ] } ';' SEM<<loc++;>>.
   81| 		FuncHead              = '(' [ FormParList ] ')' .
   82| 		FormParList           =	( 'void' [ FormParListRest ] | NonVoidType FormParListRest ).
   83| 		FormParListRest       = [ '*' ] ident [ '[' ']' ] { ',' Type [ '*' ] ident [ '[' ']' ] } .
   84| 		Type                  = 'void' | NonVoidType .
   85| 		NonVoidType           = 'bool' | 'int' .
   86| 		Block                 =	'{' { ConstDecl | Type [ '*' ] ident VarDef | Stat } '}' SEM<<loc++;>>.
   87| 		Stat                  = ( IdentStat | IfStat | WhileStat | BreakStat | InputStat
   88| 		                        | OutputStat | DeleteStat | ReturnStat | Block | (';' SEM<<stc++;>>) ).
   89| 		IdentStat             =	ident ('++' | '--' | [ '[' Expr ']' ] '=' Expr | '(' [ ActParList ] ')') ';'.
   90| 		ActParList            = Expr { ',' Expr } .
   91| 		IfStat                = 'if' '(' Expr ')' Stat [ 'else' Stat SEM<<mc++;>>] SEM<<loc++;mc++;>>.
   92| 		WhileStat             = 'while' '(' Expr ')' Stat .
   93| 		BreakStat             = 'break' ';' .
   94| 		InputStat             = 'cin'  '>>' ident ';' .
   95| 		OutputStat            = 'cout' '<<' ( Expr | string | 'endl' ) { '<<' ( Expr | string | 'endl' ) } ';' .
   96| 		DeleteStat            = 'delete' '[' ']' ident ';' .
   97| 		ReturnStat            = 'return' [ Expr ] ';' .
   98| 		Expr                  =	OrExpr .
   99| 		OrExpr                = AndExpr { '||' AndExpr } .
  100| 		AndExpr               = RelExpr { '&&' RelExpr } .
  101| 		RelExpr               =	SimpleExpr [ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr ] .
  102| 		SimpleExpr            = [ '+' | '-' ] Term { ( '+' | '-' ) Term } .
  103| 		Term                  = NotFact { ( '*' | '/' | '%' )  NotFact } .
  104| 		NotFact               = [ '!' ] Fact .
  105| 		Fact                  = 'false'
  106| 		                        | 'true'
  107| 														| number
  108| 														| ident [ ( '[' Expr ']' )
  109| 														| ( '(' [ ActParList ] ')' ) ]
  110| 														| 'new' Type '[' Expr ']'
  111| 														| '(' Expr ')' .
  112| 
  113| 	END MiniCPP.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


start table:
-----------

   '!'                    30 | '\"'                     27
   '%'                     8 | '&'                      11
   '('                    19 | ')'                      20
   '*'                     7 | '+'                      31
   ','                     3 | '-'                      32
   '/'                     6 | '0'..'9'                 25
   ';'                     2 | '<'                      33
   '='                    34 | '>'                      35
   'A'..'Z'               26 | '['                      21
   ']'                    22 | '_'                      26
   'a'..'f'               29 | 'g'                      26
   'h'..'i'               29 | 'j'                      26
   'k'..'l'               29 | 'm'                      26
   'n'..'p'               29 | 'q'                      26
   'r'..'w'               29 | 'x'..'z'                 26
   '{'                    23 | '|'                       9
   '}'                    24 | ELSE                      0
   

ignored characters:
------------------

{ HT..LF, ' ' }

comment starts:
--------------

{ '/' }

character classes:
-----------------

1: { '0'..'9' }

2: { 'A'..'Z', 'a'..'z' }

3: { EF..'!', '#'..'Ã¿' }

4: { 'a'..'f', 'h'..'i', 'k'..'l', 'n'..'p', 'r'..'w' }

5: { 'A'..'Z', 'g', 'j', 'm', 'q', 'x'..'z' }
