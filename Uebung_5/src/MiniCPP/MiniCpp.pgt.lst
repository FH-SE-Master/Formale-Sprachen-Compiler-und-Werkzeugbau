Coco-2 PGT (source: ..\MiniCPP\MiniCpp.atg)



    1| /* Attributed grammar for MiniCPP */
    2| COMPILER MiniCPP
    3| 
    4| SEM<<
    5| 	private static int stc = 0;
    6| 	private static int mc  = 0;
    7| >>
    8| 
    9| 
   10| CHARACTER SETS
   11| 	digit		= '0' .. '9'.
   12| 	letter		= 'a' .. 'z' + 'A' .. 'Z' .
   13| 	whiteSpace	= CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   14| 	noquote		= ANY - '"'.
   15| 
   16| COMMENTS
   17| 	FROM '//' TO EOL.
   18| 	FROM '/*' TO '*/'.
   19| 
   20| KEYWORDS
   21| 	'void'.  'new'. 'return'. 'const'. 'break'.
   22| 	'int'. 'false'. 'true'.  'bool'.
   23| 	'scanf'. 'printf'. 'cin'. 'cout'. 'endl'.
   24| 	'if'. 'while'.  'else'. 'for'. 'delete'.
   25| 
   26| TOKENS
   27| 	';'. ','.
   28| 	'='. '+'. '-'. '++'. '--'. '/'. '*'. '%'.
   29| 	'||'. '&&'. '<'. '>'. '<<'. '>>'. '<='. '>='. '=='. '!='. '!'.
   30| 	'('. ')'. '['. ']'. '{'. '}'.
   31| 
   32| TOKEN CLASSES
   33| 	number = digit { digit }.
   34| 	ident = ( letter | '_' ) { letter | digit | '_' }.
   35| 	string = '"' { noquote } '"'.
   36| 
   37| NONTERMINALS
   38| 	MiniCPP.
   39| 	ConstDecl.
   40| 	Init.
   41| 	VarDef.
   42| 	FuncHead.
   43| 	FormParList.
   44| 	Type.
   45| 	Block.
   46| 	Stat.
   47| 	Expr.
   48| 	Term.
   49| 	Fact.
   50| 	ActParList.
   51| 	IfStat.
   52| 	WhileStat.
   53| 	BreakStat.
   54| 	InputStat.
   55| 	OutputStat.
   56| 	DeleteStat.
   57| 	ReturnStat.
   58| 	OrExpr.
   59| 	AndExpr.
   60| 	RelExpr.
   61| 	SimpleExpr.
   62| 	NotFact.
   63| 	VarDefOrFuncDeclOrDef.
   64| 	FormParListRest.
   65| 	NonVoidType.
   66| 	IdentStat.
   67| 
   68| 	RULES
   69| 
   70| 		MiniCPP               = { ConstDecl | VarDefOrFuncDeclOrDef }
   71| 														SEM<<
   72| 																	Console.WriteLine($"Lines of code: {MiniCPPLex.tokenLine - 1}");
   73| 																  Console.WriteLine($"Lines of statements: {stc}");
   74| 																  Console.WriteLine($"Complexity by McCabe: {mc}");
   75| 														>>.
   76| 		VarDefOrFuncDeclOrDef = Type [ '*' ] ident (VarDef | FuncHead (';' | Block)) .
   77| 		ConstDecl             = 'const' Type ident Init ';'.
   78| 		Init                  = '=' ( false | true | number ) .
   79| 		VarDef                =	[ Init ] { ',' [ '*' ] ident [ Init ] } ';'.
   80| 		FuncHead              = '(' [ FormParList ] ')' .
   81| 		FormParList           =	( 'void' [ FormParListRest ] | NonVoidType FormParListRest ).
   82| 		FormParListRest       = [ '*' ] ident [ '[' ']' ] { ',' Type [ '*' ] ident [ '[' ']' ] } .
   83| 		Type                  = 'void' | NonVoidType .
   84| 		NonVoidType           = 'bool' | 'int' .
   85| 		Block                 =	'{' { ConstDecl | Type [ '*' ] ident VarDef | Stat } '}'.
   86| 		Stat                  = SEM<<stc++;>> ( IdentStat | IfStat | WhileStat | BreakStat | InputStat
   87| 		                        | OutputStat | DeleteStat | ReturnStat | Block | ';' ).
   88| 		IdentStat             =	ident ('++' | '--' | [ '[' Expr ']' ] '=' Expr | '(' [ ActParList ] ')') ';'.
   89| 		ActParList            = Expr { ',' Expr } .
   90| 		IfStat                = SEM<<mc++;>> 'if' '(' Expr ')' Stat [ 'else' Stat SEM<<mc++;>>].
!WRN!                                                                  ^LL(1) error (start AND succ): else
   91| 		WhileStat             = SEM<<mc++;>> 'while' '(' Expr ')' Stat .
   92| 		BreakStat             = 'break' ';' .
   93| 		InputStat             = 'cin'  '>>' ident ';' .
   94| 		OutputStat            = 'cout' '<<' ( Expr | string | 'endl' ) { '<<' ( Expr | string | 'endl' ) } ';' .
   95| 		DeleteStat            = 'delete' '[' ']' ident ';' .
   96| 		ReturnStat            = 'return' [ Expr ] ';' .
   97| 		Expr                  =	OrExpr .
   98| 		OrExpr                = AndExpr { '||' AndExpr } .
   99| 		AndExpr               = RelExpr { '&&' RelExpr } .
  100| 		RelExpr               =	SimpleExpr [ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr ] .
  101| 		SimpleExpr            = [ '+' | '-' ] Term { ( '+' | '-' ) Term } .
  102| 		Term                  = NotFact { ( '*' | '/' | '%' )  NotFact } .
  103| 		NotFact               = [ '!' ] Fact .
  104| 		Fact                  = 'false'
  105| 		                        | 'true'
  106| 														| number
  107| 														| ident [ ( '[' Expr ']' )
  108| 														| ( '(' [ ActParList ] ')' ) ]
  109| 														| 'new' Type '[' Expr ']'
  110| 														| '(' Expr ')' .
  111| 
  112| 	END MiniCPP.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    1 warning(s)       


statistics:
----------

   49 terminals
   29 nonterminals
  113 alternatives
  197 nodes in top-down graph
   10 eps sets (with look ahead)
    1 any sets

  715 bytes G-code

deletable nonterminal(s):
------------------------

  MiniCPP


G-code:

======

-----  MiniCPP  ----------------------------
    1  NTA    ConstDecl               9    9
    6  JMP        1

    9  NTA    VarDefOrFuncDeclOrD.   17   17
   14  JMP        1

   17  EPS        1
   19  SEM        3
   20  RET

-----  ConstDecl  --------------------------
   21  T      const
   23  NT     Type                    1
   26  TC     ident                   2
   29  NT     Init                    3
   32  T      ';'
   34  RET

-----  Init  -------------------------------
   35  T      '='
   37  TA     false                  42
   41  RET

   42  TA     true                   47
   46  RET

   47  TC     number                  1
   50  RET

-----  VarDef  -----------------------------
   51  NTA    Init                   56   56
   56  TA     ','                    75
   60  TA     '*'                    64
   64  TC     ident                   2
   67  NTA    Init                   56   56
   72  JMP       56

   75  T      ';'
   77  RET

-----  FuncHead  ---------------------------
   78  T      '('
   80  NTA    FormParList            85   85
   85  T      ')'
   87  RET

-----  FormParList  ------------------------
   88  TA     void                  101
   92  NTA    FormParListRest        98   98
   97  RET

   98  EPS        2
  100  RET

  101  NT     NonVoidType             2
  104  NT     FormParListRest         3
  107  RET

-----  Type  -------------------------------
  108  TA     void                  113
  112  RET

  113  NT     NonVoidType             1
  116  RET

-----  Block  ------------------------------
  117  T      '{'
  119  NTA    ConstDecl             127  127
  124  JMP      119

  127  NTA    Type                  145  145
  132  TA     '*'                   136
  136  TC     ident                   3
  139  NT     VarDef                  4
  142  JMP      119

  145  NTA    Stat                  153  153
  150  JMP      119

  153  T      '}'
  155  RET

-----  Stat  -------------------------------
  156  SEM        1
  157  NTA    IdentStat             163  163
  162  RET

  163  NTA    IfStat                169  169
  168  RET

  169  NTA    WhileStat             175  175
  174  RET

  175  NTA    BreakStat             181  181
  180  RET

  181  NTA    InputStat             187  187
  186  RET

  187  NTA    OutputStat            193  193
  192  RET

  193  NTA    DeleteStat            199  199
  198  RET

  199  NTA    ReturnStat            205  205
  204  RET

  205  NTA    Block                 211  211
  210  RET

  211  T      ';'
  213  RET

-----  Expr  -------------------------------
  214  NT     OrExpr                  1
  217  RET

-----  Term  -------------------------------
  218  NT     NotFact                 1
  221  TA     '*'                   231
  225  NT     NotFact                 2
  228  JMP      221

  231  TA     '/'                   238
  235  JMP      225

  238  TA     '%'                   245
  242  JMP      225

  245  EPS        3
  247  RET

-----  Fact  -------------------------------
  248  TA     false                 253
  252  RET

  253  TA     true                  258
  257  RET

  258  TCA    number                264  264
  263  RET

  264  TCA    ident                 294  294
  269  TA     '['                   279
  273  NT     Expr                    3
  276  T      ']'
  278  RET

  279  TA     '('                   291
  283  NTA    ActParList            288  288
  288  T      ')'
  290  RET

  291  EPS        4
  293  RET

  294  TA     new                   309
  298  NT     Type                    5
  301  T      '['
  303  NT     Expr                    6
  306  T      ']'
  308  RET

  309  T      '('
  311  NT     Expr                    7
  314  T      ')'
  316  RET

-----  ActParList  -------------------------
  317  NT     Expr                    1
  320  TA     ','                   330
  324  NT     Expr                    2
  327  JMP      320

  330  EPS        2
  332  RET

-----  IfStat  -----------------------------
  333  SEM        1
  334  T      if
  336  T      '('
  338  NT     Expr                    2
  341  T      ')'
  343  NT     Stat                    3
  346  TA     else                  355
  350  NT     Stat                    4
  353  SEM        5
  354  RET

  355  EPS        5
  357  RET

-----  WhileStat  --------------------------
  358  SEM        1
  359  T      while
  361  T      '('
  363  NT     Expr                    2
  366  T      ')'
  368  NT     Stat                    3
  371  RET

-----  BreakStat  --------------------------
  372  T      break
  374  T      ';'
  376  RET

-----  InputStat  --------------------------
  377  T      cin
  379  T      '>>'
  381  TC     ident                   1
  384  T      ';'
  386  RET

-----  OutputStat  -------------------------
  387  T      cout
  389  T      '<<'
  391  NTA    Expr                  424  424
  396  TA     '<<'                  421
  400  NTA    Expr                  408  408
  405  JMP      396

  408  TCA    string                416  416
  413  JMP      396

  416  T      endl
  418  JMP      396

  421  T      ';'
  423  RET

  424  TCA    string                432  432
  429  JMP      396

  432  T      endl
  434  JMP      396

-----  DeleteStat  -------------------------
  437  T      delete
  439  T      '['
  441  T      ']'
  443  TC     ident                   1
  446  T      ';'
  448  RET

-----  ReturnStat  -------------------------
  449  T      return
  451  NTA    Expr                  456  456
  456  T      ';'
  458  RET

-----  OrExpr  -----------------------------
  459  NT     AndExpr                 1
  462  TA     '||'                  472
  466  NT     AndExpr                 2
  469  JMP      462

  472  EPS        6
  474  RET

-----  AndExpr  ----------------------------
  475  NT     RelExpr                 1
  478  TA     '&&'                  488
  482  NT     RelExpr                 2
  485  JMP      478

  488  EPS        7
  490  RET

-----  RelExpr  ----------------------------
  491  NT     SimpleExpr              1
  494  TA     '=='                  502
  498  NT     SimpleExpr              2
  501  RET

  502  TA     '!='                  509
  506  JMP      498

  509  TA     '<'                   516
  513  JMP      498

  516  TA     '<='                  523
  520  JMP      498

  523  TA     '>'                   530
  527  JMP      498

  530  TA     '>='                  537
  534  JMP      498

  537  EPS        8
  539  RET

-----  SimpleExpr  -------------------------
  540  TA     '+'                   567
  544  NT     Term                    1
  547  TA     '+'                   557
  551  NT     Term                    2
  554  JMP      547

  557  TA     '-'                   564
  561  JMP      551

  564  EPS        9
  566  RET

  567  TA     '-'                   544
  571  JMP      544

-----  NotFact  ----------------------------
  574  TA     '!'                   578
  578  NT     Fact                    1
  581  RET

-----  VarDefOrFuncDeclOrDef  --------------
  582  NT     Type                    1
  585  TA     '*'                   589
  589  TC     ident                   2
  592  NTA    VarDef                598  598
  597  RET

  598  NT     FuncHead                4
  601  TA     ';'                   606
  605  RET

  606  NT     Block                   5
  609  RET

-----  FormParListRest  --------------------
  610  TA     '*'                   614
  614  TC     ident                   1
  617  TA     '['                   623
  621  T      ']'
  623  TA     ','                   646
  627  NT     Type                    2
  630  TA     '*'                   634
  634  TC     ident                   3
  637  TA     '['                   623
  641  T      ']'
  643  JMP      623

  646  EPS        2
  648  RET

-----  NonVoidType  ------------------------
  649  TA     bool                  654
  653  RET

  654  T      int
  656  RET

-----  IdentStat  --------------------------
  657  TC     ident                   1
  660  TA     '++'                  667
  664  T      ';'
  666  RET

  667  TA     '--'                  674
  671  JMP      664

  674  TA     '['                   691
  678  NT     Expr                    2
  681  T      ']'
  683  T      '='
  685  NT     Expr                    3
  688  JMP      664

  691  EPSA      10         698
  695  JMP      683

  698  T      '('
  700  NTA    ActParList            705  705
  705  T      ')'
  707  JMP      664

-----  R o o t  ----------------------------
  710  NT     MiniCPP                 1
  713  T      'end of file'
  715  RET


nonterminals:
============

MiniCPP                   1 del { void, const, int, bool }
ConstDecl                21     { const }
Init                     35     { '=' }
VarDef                   51     { ';', ',', '=' }
FuncHead                 78     { '(' }
FormParList              88     { void, int, bool }
Type                    108     { void, int, bool }
Block                   117     { '{' }
Stat                    156     { return, break, cin, cout, if, while, delete, 
                                ';', '{', ident }
Expr                    214     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
Term                    218     { new, false, true, '!', '(', number, ident }
Fact                    248     { new, false, true, '(', number, ident }
ActParList              317     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
IfStat                  333     { if }
WhileStat               358     { while }
BreakStat               372     { break }
InputStat               377     { cin }
OutputStat              387     { cout }
DeleteStat              437     { delete }
ReturnStat              449     { return }
OrExpr                  459     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
AndExpr                 475     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
RelExpr                 491     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
SimpleExpr              540     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
NotFact                 574     { new, false, true, '!', '(', number, ident }
VarDefOrFuncDeclOrD.    582     { void, int, bool }
FormParListRest         610     { '*', ident }
NonVoidType             649     { int, bool }
IdentStat               657     { ident }


eps look-aheads:
===============

    1   { 'end of file' }
    2   { ')' }
    3   { ';', ',', '+', '-', '||', '&&', '<', '>', '<<', '<=', '>=', '==', '!=', 
        ')', ']' }
    4   { ';', ',', '+', '-', '/', '*', '%', '||', '&&', '<', '>', '<<', '<=', 
        '>=', '==', '!=', ')', ']' }
    5   { void, return, const, break, int, bool, cin, cout, if, while, else, 
        delete, ';', '{', '}', ident }
    6   { ';', ',', '<<', ')', ']' }
    7   { ';', ',', '||', '<<', ')', ']' }
    8   { ';', ',', '||', '&&', '<<', ')', ']' }
    9   { ';', ',', '||', '&&', '<', '>', '<<', '<=', '>=', '==', '!=', ')', ']' }
   10   { '=' }
