Coco-2 PGT (source: ..\MiniCPP\MiniCPP.atg)



    1| /* Attributed grammar for MiniCPP */
    2| COMPILER MiniCPP
    3| 
    4| SEM<<
    5| 	private static int loc = 0;
    6| 	private static int stc = 0;
    7| 	private static int mc  = 0;
    8| >>
    9| 
   10| 
   11| CHARACTER SETS
   12| 	digit		= '0' .. '9'.
   13| 	letter		= 'a' .. 'z' + 'A' .. 'Z' .
   14| 	whiteSpace	= CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   15| 	noquote		= ANY - '"'.
   16| 
   17| COMMENTS
   18| 	FROM '//' TO EOL.
   19| 	FROM '/*' TO '*/'.
   20| 
   21| KEYWORDS
   22| 	'void'. 'scanf'. 'printf'. 'int'. 'false'. 'true'. 'const'. 'if'. 'while'. 'break'. 'cin'. 'cout'. 'else'. 'for'. 'delete'. 'new'. 'endl'. 'return'. 'bool'.
   23| 
   24| TOKENS
   25| 	 '{'. '}'. ','. ';'. '='. '++'. '--'. '<<'. '>>'. '||'. '&&'. '=='. '!='. '<='. '>='.
   26| 	 '+'. '-'. '*'. '['. ']'. '%'. '!'. '>'. '<'. '/'. '('. ')'.
   27| 
   28| TOKEN CLASSES
   29| 	number = digit { digit }.
   30| 	ident = ( letter | '_' ) { letter | digit | '_' }.
   31| 	string = '"' { noquote } '"'.
   32| 
   33| NONTERMINALS
   34| 	MiniCPP.
   35| 	ConstDecl.
   36| 	Init.
   37| 	VarDef.
   38| 	FuncHead.
   39| 	FormParList.
   40| 	Type.
   41| 	Block.
   42| 	Stat.
   43| 	Expr.
   44| 	Term.
   45| 	Fact.
   46| 	ActParList.
   47| 	IfStat.
   48| 	WhileStat.
   49| 	BreakStat.
   50| 	InputStat.
   51| 	OutputStat.
   52| 	DeleteStat.
   53| 	ReturnStat.
   54| 	OrExpr.
   55| 	AndExpr.
   56| 	RelExpr.
   57| 	SimpleExpr.
   58| 	NotFact.
   59| 	VarDefOrFuncDeclOrDef.
   60| 	FormParListRest.
   61| 	NonVoidType.
   62| 	IdentStat.
   63| 
   64| 	RULES
   65| 
   66| 		MiniCPP               = { ConstDecl | VarDefOrFuncDeclOrDef }
   67| 														SEM<<
   68| 																	Console.WriteLine($"Lines of code: {loc}");
   69| 																  Console.WriteLine($"Lines of statements: {stc}");
   70| 																  Console.WriteLine($"Complexity by McCabe: {mc}");
   71| 														>>.
   72| 		VarDefOrFuncDeclOrDef = Type [ '*' ] ident (VarDef | FuncHead (';' SEM<<loc++;>> | Block)) .
   73| 		ConstDecl             = 'const' Type ident Init ';' SEM<<loc++;>> .
   74| 		Init                  = '=' ( false | true | number ) .
   75| 		VarDef                =	[ Init ] { ',' [ '*' ] ident [ Init ] } ';' SEM<<loc++;>>.
   76| 		FuncHead              = '(' [ FormParList ] ')' .
   77| 		FormParList           =	( 'void' [ FormParListRest ] | NonVoidType FormParListRest ).
   78| 		FormParListRest       = [ '*' ] ident [ '[' ']' ] { ',' Type [ '*' ] ident [ '[' ']' ] } .
   79| 		Type                  = 'void' | NonVoidType .
   80| 		NonVoidType           = 'bool' | 'int' .
   81| 		Block                 =	'{' { ConstDecl | Type [ '*' ] ident VarDef | Stat } '}'.
   82| 		Stat                  = ( IdentStat | IfStat | WhileStat | BreakStat | InputStat
   83| 		                        | OutputStat | DeleteStat | ReturnStat | Block | ';' )
   84| 														SEM<<loc++; stc++;>>.
   85| 		IdentStat             =	ident ('++' | '--' | [ '[' Expr ']' ] '=' Expr | '(' [ ActParList ] ')') ';'.
   86| 		ActParList            = Expr { ',' Expr } .
   87| 		IfStat                = 'if' '(' Expr ')' Stat [ 'else' Stat SEM<<mc++;>>] SEM<<loc++;mc++;>>.
!WRN!                                                     ^LL(1) error (start AND succ): else
   88| 		WhileStat             = 'while' '(' Expr ')' Stat .
   89| 		BreakStat             = 'break' ';' .
   90| 		InputStat             = 'cin'  '>>' ident ';' .
   91| 		OutputStat            = 'cout' '<<' ( Expr | string | 'endl' ) { '<<' ( Expr | string | 'endl' ) } ';' .
   92| 		DeleteStat            = 'delete' '[' ']' ident ';' .
   93| 		ReturnStat            = 'return' [ Expr ] ';' .
   94| 		Expr                  =	OrExpr .
   95| 		OrExpr                = AndExpr { '||' AndExpr } .
   96| 		AndExpr               = RelExpr { '&&' RelExpr } .
   97| 		RelExpr               =	SimpleExpr [ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr ] .
   98| 		SimpleExpr            = [ '+' | '-' ] Term { ( '+' | '-' ) Term } .
   99| 		Term                  = NotFact { ( '*' | '/' | '%' )  NotFact } .
  100| 		NotFact               = [ '!' ] Fact .
  101| 		Fact                  = 'false'
  102| 		                        | 'true'
  103| 														| number
  104| 														| ident [ ( '[' Expr ']' )
  105| 														| ( '(' [ ActParList ] ')' ) ]
  106| 														| 'new' Type '[' Expr ']'
  107| 														| '(' Expr ')' .
  108| 
  109| 	END MiniCPP.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    1 warning(s)       


statistics:
----------

   49 terminals
   29 nonterminals
  113 alternatives
  196 nodes in top-down graph
   10 eps sets (with look ahead)
    1 any sets

  736 bytes G-code

deletable nonterminal(s):
------------------------

  MiniCPP


G-code:

======

-----  MiniCPP  ----------------------------
    1  NTA    ConstDecl               9    9
    6  JMP        1

    9  NTA    VarDefOrFuncDeclOrD.   17   17
   14  JMP        1

   17  EPS        1
   19  SEM        3
   20  RET

-----  ConstDecl  --------------------------
   21  T      const
   23  NT     Type                    1
   26  TC     ident                   2
   29  NT     Init                    3
   32  T      ';'
   34  SEM        4
   35  RET

-----  Init  -------------------------------
   36  T      '='
   38  TA     false                  43
   42  RET

   43  TA     true                   48
   47  RET

   48  TC     number                  1
   51  RET

-----  VarDef  -----------------------------
   52  NTA    Init                   57   57
   57  TA     ','                    76
   61  TA     '*'                    65
   65  TC     ident                   2
   68  NTA    Init                   57   57
   73  JMP       57

   76  T      ';'
   78  SEM        4
   79  RET

-----  FuncHead  ---------------------------
   80  T      '('
   82  NTA    FormParList            87   87
   87  T      ')'
   89  RET

-----  FormParList  ------------------------
   90  TA     void                  103
   94  NTA    FormParListRest       100  100
   99  RET

  100  EPS        2
  102  RET

  103  NT     NonVoidType             2
  106  NT     FormParListRest         3
  109  RET

-----  Type  -------------------------------
  110  TA     void                  115
  114  RET

  115  NT     NonVoidType             1
  118  RET

-----  Block  ------------------------------
  119  T      '{'
  121  NTA    ConstDecl             129  129
  126  JMP      121

  129  NTA    Type                  147  147
  134  TA     '*'                   138
  138  TC     ident                   3
  141  NT     VarDef                  4
  144  JMP      121

  147  NTA    Stat                  155  155
  152  JMP      121

  155  T      '}'
  157  RET

-----  Stat  -------------------------------
  158  NTA    IdentStat             167  167
  163  EPS        3
  165  SEM       10
  166  RET

  167  NTA    IfStat                175  175
  172  JMP      163

  175  NTA    WhileStat             183  183
  180  JMP      163

  183  NTA    BreakStat             191  191
  188  JMP      163

  191  NTA    InputStat             199  199
  196  JMP      163

  199  NTA    OutputStat            207  207
  204  JMP      163

  207  NTA    DeleteStat            215  215
  212  JMP      163

  215  NTA    ReturnStat            223  223
  220  JMP      163

  223  NTA    Block                 231  231
  228  JMP      163

  231  T      ';'
  233  JMP      163

-----  Expr  -------------------------------
  236  NT     OrExpr                  1
  239  RET

-----  Term  -------------------------------
  240  NT     NotFact                 1
  243  TA     '*'                   253
  247  NT     NotFact                 2
  250  JMP      243

  253  TA     '/'                   260
  257  JMP      247

  260  TA     '%'                   267
  264  JMP      247

  267  EPS        4
  269  RET

-----  Fact  -------------------------------
  270  TA     false                 275
  274  RET

  275  TA     true                  280
  279  RET

  280  TCA    number                286  286
  285  RET

  286  TCA    ident                 316  316
  291  TA     '['                   301
  295  NT     Expr                    3
  298  T      ']'
  300  RET

  301  TA     '('                   313
  305  NTA    ActParList            310  310
  310  T      ')'
  312  RET

  313  EPS        5
  315  RET

  316  TA     new                   331
  320  NT     Type                    5
  323  T      '['
  325  NT     Expr                    6
  328  T      ']'
  330  RET

  331  T      '('
  333  NT     Expr                    7
  336  T      ')'
  338  RET

-----  ActParList  -------------------------
  339  NT     Expr                    1
  342  TA     ','                   352
  346  NT     Expr                    2
  349  JMP      342

  352  EPS        2
  354  RET

-----  IfStat  -----------------------------
  355  T      if
  357  T      '('
  359  NT     Expr                    1
  362  T      ')'
  364  NT     Stat                    2
  367  TA     else                  375
  371  NT     Stat                    3
  374  SEM        4
  375  EPS        3
  377  SEM        5
  378  RET

-----  WhileStat  --------------------------
  379  T      while
  381  T      '('
  383  NT     Expr                    1
  386  T      ')'
  388  NT     Stat                    2
  391  RET

-----  BreakStat  --------------------------
  392  T      break
  394  T      ';'
  396  RET

-----  InputStat  --------------------------
  397  T      cin
  399  T      '>>'
  401  TC     ident                   1
  404  T      ';'
  406  RET

-----  OutputStat  -------------------------
  407  T      cout
  409  T      '<<'
  411  NTA    Expr                  444  444
  416  TA     '<<'                  441
  420  NTA    Expr                  428  428
  425  JMP      416

  428  TCA    string                436  436
  433  JMP      416

  436  T      endl
  438  JMP      416

  441  T      ';'
  443  RET

  444  TCA    string                452  452
  449  JMP      416

  452  T      endl
  454  JMP      416

-----  DeleteStat  -------------------------
  457  T      delete
  459  T      '['
  461  T      ']'
  463  TC     ident                   1
  466  T      ';'
  468  RET

-----  ReturnStat  -------------------------
  469  T      return
  471  NTA    Expr                  476  476
  476  T      ';'
  478  RET

-----  OrExpr  -----------------------------
  479  NT     AndExpr                 1
  482  TA     '||'                  492
  486  NT     AndExpr                 2
  489  JMP      482

  492  EPS        6
  494  RET

-----  AndExpr  ----------------------------
  495  NT     RelExpr                 1
  498  TA     '&&'                  508
  502  NT     RelExpr                 2
  505  JMP      498

  508  EPS        7
  510  RET

-----  RelExpr  ----------------------------
  511  NT     SimpleExpr              1
  514  TA     '=='                  522
  518  NT     SimpleExpr              2
  521  RET

  522  TA     '!='                  529
  526  JMP      518

  529  TA     '<'                   536
  533  JMP      518

  536  TA     '<='                  543
  540  JMP      518

  543  TA     '>'                   550
  547  JMP      518

  550  TA     '>='                  557
  554  JMP      518

  557  EPS        8
  559  RET

-----  SimpleExpr  -------------------------
  560  TA     '+'                   587
  564  NT     Term                    1
  567  TA     '+'                   577
  571  NT     Term                    2
  574  JMP      567

  577  TA     '-'                   584
  581  JMP      571

  584  EPS        9
  586  RET

  587  TA     '-'                   564
  591  JMP      564

-----  NotFact  ----------------------------
  594  TA     '!'                   598
  598  NT     Fact                    1
  601  RET

-----  VarDefOrFuncDeclOrDef  --------------
  602  NT     Type                    1
  605  TA     '*'                   609
  609  TC     ident                   2
  612  NTA    VarDef                618  618
  617  RET

  618  NT     FuncHead                4
  621  TA     ';'                   627
  625  SEM        5
  626  RET

  627  NT     Block                   6
  630  RET

-----  FormParListRest  --------------------
  631  TA     '*'                   635
  635  TC     ident                   1
  638  TA     '['                   644
  642  T      ']'
  644  TA     ','                   667
  648  NT     Type                    2
  651  TA     '*'                   655
  655  TC     ident                   3
  658  TA     '['                   644
  662  T      ']'
  664  JMP      644

  667  EPS        2
  669  RET

-----  NonVoidType  ------------------------
  670  TA     bool                  675
  674  RET

  675  T      int
  677  RET

-----  IdentStat  --------------------------
  678  TC     ident                   1
  681  TA     '++'                  688
  685  T      ';'
  687  RET

  688  TA     '--'                  695
  692  JMP      685

  695  TA     '['                   712
  699  NT     Expr                    2
  702  T      ']'
  704  T      '='
  706  NT     Expr                    3
  709  JMP      685

  712  EPSA      10         719
  716  JMP      704

  719  T      '('
  721  NTA    ActParList            726  726
  726  T      ')'
  728  JMP      685

-----  R o o t  ----------------------------
  731  NT     MiniCPP                 1
  734  T      'end of file'
  736  RET


nonterminals:
============

MiniCPP                   1 del { void, int, const, bool }
ConstDecl                21     { const }
Init                     36     { '=' }
VarDef                   52     { ',', ';', '=' }
FuncHead                 80     { '(' }
FormParList              90     { void, int, bool }
Type                    110     { void, int, bool }
Block                   119     { '{' }
Stat                    158     { if, while, break, cin, cout, delete, return, 
                                '{', ';', ident }
Expr                    236     { false, true, new, '+', '-', '!', '(', number, 
                                ident }
Term                    240     { false, true, new, '!', '(', number, ident }
Fact                    270     { false, true, new, '(', number, ident }
ActParList              339     { false, true, new, '+', '-', '!', '(', number, 
                                ident }
IfStat                  355     { if }
WhileStat               379     { while }
BreakStat               392     { break }
InputStat               397     { cin }
OutputStat              407     { cout }
DeleteStat              457     { delete }
ReturnStat              469     { return }
OrExpr                  479     { false, true, new, '+', '-', '!', '(', number, 
                                ident }
AndExpr                 495     { false, true, new, '+', '-', '!', '(', number, 
                                ident }
RelExpr                 511     { false, true, new, '+', '-', '!', '(', number, 
                                ident }
SimpleExpr              560     { false, true, new, '+', '-', '!', '(', number, 
                                ident }
NotFact                 594     { false, true, new, '!', '(', number, ident }
VarDefOrFuncDeclOrD.    602     { void, int, bool }
FormParListRest         631     { '*', ident }
NonVoidType             670     { int, bool }
IdentStat               678     { ident }


eps look-aheads:
===============

    1   { 'end of file' }
    2   { ')' }
    3   { void, int, const, if, while, break, cin, cout, else, delete, return, 
        bool, '{', '}', ';', ident }
    4   { ',', ';', '<<', '||', '&&', '==', '!=', '<=', '>=', '+', '-', ']', '>', 
        '<', ')' }
    5   { ',', ';', '<<', '||', '&&', '==', '!=', '<=', '>=', '+', '-', '*', ']', 
        '%', '>', '<', '/', ')' }
    6   { ',', ';', '<<', ']', ')' }
    7   { ',', ';', '<<', '||', ']', ')' }
    8   { ',', ';', '<<', '||', '&&', ']', ')' }
    9   { ',', ';', '<<', '||', '&&', '==', '!=', '<=', '>=', ']', '>', '<', ')' }
   10   { '=' }
