Coco-2 PGT (source: ..\MiniCPP\MiniCPP.atg)



    1| /* Attributed grammar for MiniCPP */
    2| COMPILER MiniCPP
    3| 
    4| SEM<<
    5| 	private static int stc = 0;
    6| 	private static int mc  = 0;
    7| 
    8| 	public static void printResults() {
    9| 				// it seems a line is count too much !?!
   10| 				Console.WriteLine($"Lines of code: {MiniCPPLex.tokenLine - 1}");
   11| 				Console.WriteLine($"Lines of statements: {stc}");
   12| 				Console.WriteLine($"Complexity by McCabe: {1 + mc}");
   13| 	}
   14| >>
   15| 
   16| 
   17| CHARACTER SETS
   18| 	digit		= '0' .. '9'.
   19| 	letter		= 'a' .. 'z' + 'A' .. 'Z' .
   20| 	whiteSpace	= CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   21| 	noquote		= ANY - '"'.
   22| 
   23| COMMENTS
   24| 	FROM '//' TO EOL.
   25| 	FROM '/*' TO '*/'.
   26| 
   27| KEYWORDS
   28| 	'void'.  'new'. 'return'. 'const'. 'break'.
   29| 	'int'. 'false'. 'true'.  'bool'.
   30| 	'scanf'. 'printf'. 'cin'. 'cout'. 'endl'.
   31| 	'if'. 'while'.  'else'. 'for'. 'delete'.
   32| 
   33| TOKENS
   34| 	';'. ','.
   35| 	'='. '+'. '-'. '++'. '--'. '/'. '*'. '%'.
   36| 	'||'. '&&'. '<'. '>'. '<<'. '>>'. '<='. '>='. '=='. '!='. '!'.
   37| 	'('. ')'. '['. ']'. '{'. '}'.
   38| 
   39| TOKEN CLASSES
   40| 	number = digit { digit }.
   41| 	ident = ( letter | '_' ) { letter | digit | '_' }.
   42| 	string = '"' { noquote } '"'.
   43| 
   44| NONTERMINALS
   45| 	MiniCPP.
   46| 	ConstDecl.
   47| 	Init.
   48| 	VarDef.
   49| 	FuncHead.
   50| 	FormParList.
   51| 	Type.
   52| 	Block.
   53| 	Stat.
   54| 	Expr.
   55| 	Term.
   56| 	Fact.
   57| 	ActParList.
   58| 	IfStat.
   59| 	WhileStat.
   60| 	BreakStat.
   61| 	InputStat.
   62| 	OutputStat.
   63| 	DeleteStat.
   64| 	ReturnStat.
   65| 	OrExpr.
   66| 	AndExpr.
   67| 	RelExpr.
   68| 	SimpleExpr.
   69| 	NotFact.
   70| 	VarDefOrFuncDeclOrDef.
   71| 	FormParListRest.
   72| 	NonVoidType.
   73| 	IdentStat.
   74| 
   75| 	RULES
   76| 
   77| 		MiniCPP               = { ConstDecl | VarDefOrFuncDeclOrDef }
   78| 														SEM<<
   79| 																	Console.WriteLine($"Lines of code:        {MiniCPPLex.tokenLine - 1}");
   80| 																  Console.WriteLine($"Lines of statements:  {stc}");
   81| 																  Console.WriteLine($"Complexity by McCabe: {mc}");
   82| 														>>.
   83| 		VarDefOrFuncDeclOrDef = Type [ '*' ] ident (VarDef | FuncHead (';' | Block)) .
   84| 		ConstDecl             = 'const' Type ident Init ';'.
   85| 		Init                  = '=' ( false | true | number ) .
   86| 		VarDef                =	[ Init ] { ',' [ '*' ] ident [ Init ] } ';'.
   87| 		FuncHead              = '(' [ FormParList ] ')' .
   88| 		FormParList           =	( 'void' [ FormParListRest ] | NonVoidType FormParListRest ).
   89| 		FormParListRest       = [ '*' ] ident [ '[' ']' ] { ',' Type [ '*' ] ident [ '[' ']' ] } .
   90| 		Type                  = 'void' | NonVoidType .
   91| 		NonVoidType           = 'bool' | 'int' .
   92| 		Block                 =	'{' { ConstDecl | Type [ '*' ] ident VarDef | Stat } '}'.
   93| 		Stat                  = SEM<<stc++;>> ( IdentStat | IfStat | WhileStat | BreakStat | InputStat
   94| 		                        | OutputStat | DeleteStat | ReturnStat | Block | ';' ).
   95| 		IdentStat             =	ident ('++' | '--' | [ '[' Expr ']' ] '=' Expr | '(' [ ActParList ] ')') ';'.
   96| 		ActParList            = Expr { ',' Expr } .
   97| 		IfStat                = SEM<<mc++;>> 'if' '(' Expr ')' Stat [ SEM<<mc++;>> 'else' Stat ].
!WRN!                                                                               ^LL(1) error (start AND succ): else
   98| 		WhileStat             = SEM<<mc++;>> 'while' '(' Expr ')' Stat .
   99| 		BreakStat             = 'break' ';' .
  100| 		InputStat             = 'cin'  '>>' ident ';' .
  101| 		OutputStat            = 'cout' '<<' ( Expr | string | 'endl' ) { '<<' ( Expr | string | 'endl' ) } ';' .
  102| 		DeleteStat            = 'delete' '[' ']' ident ';' .
  103| 		ReturnStat            = 'return' [ Expr ] ';' .
  104| 		Expr                  =	OrExpr .
  105| 		OrExpr                = AndExpr { '||' AndExpr } .
  106| 		AndExpr               = RelExpr { '&&' RelExpr } .
  107| 		RelExpr               =	SimpleExpr [ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr ] .
  108| 		SimpleExpr            = [ '+' | '-' ] Term { ( '+' | '-' ) Term } .
  109| 		Term                  = NotFact { ( '*' | '/' | '%' )  NotFact } .
  110| 		NotFact               = [ '!' ] Fact .
  111| 		Fact                  = 'false'
  112| 		                        | 'true'
  113| 														| number
  114| 														| ident [ ( '[' Expr ']' )
  115| 														| ( '(' [ ActParList ] ')' ) ]
  116| 														| 'new' Type '[' Expr ']'
  117| 														| '(' Expr ')' .
  118| 
  119| 	END MiniCPP.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    1 warning(s)       


statistics:
----------

   49 terminals
   29 nonterminals
  113 alternatives
  198 nodes in top-down graph
   11 eps sets (with look ahead)
    1 any sets

  717 bytes G-code

deletable nonterminal(s):
------------------------

  MiniCPP


G-code:

======

-----  MiniCPP  ----------------------------
    1  NTA    ConstDecl               9    9
    6  JMP        1

    9  NTA    VarDefOrFuncDeclOrD.   17   17
   14  JMP        1

   17  EPS        1
   19  SEM        3
   20  RET

-----  ConstDecl  --------------------------
   21  T      const
   23  NT     Type                    1
   26  TC     ident                   2
   29  NT     Init                    3
   32  T      ';'
   34  RET

-----  Init  -------------------------------
   35  T      '='
   37  TA     false                  42
   41  RET

   42  TA     true                   47
   46  RET

   47  TC     number                  1
   50  RET

-----  VarDef  -----------------------------
   51  NTA    Init                   56   56
   56  TA     ','                    75
   60  TA     '*'                    64
   64  TC     ident                   2
   67  NTA    Init                   56   56
   72  JMP       56

   75  T      ';'
   77  RET

-----  FuncHead  ---------------------------
   78  T      '('
   80  NTA    FormParList            85   85
   85  T      ')'
   87  RET

-----  FormParList  ------------------------
   88  TA     void                  101
   92  NTA    FormParListRest        98   98
   97  RET

   98  EPS        2
  100  RET

  101  NT     NonVoidType             2
  104  NT     FormParListRest         3
  107  RET

-----  Type  -------------------------------
  108  TA     void                  113
  112  RET

  113  NT     NonVoidType             1
  116  RET

-----  Block  ------------------------------
  117  T      '{'
  119  NTA    ConstDecl             127  127
  124  JMP      119

  127  NTA    Type                  145  145
  132  TA     '*'                   136
  136  TC     ident                   3
  139  NT     VarDef                  4
  142  JMP      119

  145  NTA    Stat                  153  153
  150  JMP      119

  153  T      '}'
  155  RET

-----  Stat  -------------------------------
  156  SEM        1
  157  NTA    IdentStat             163  163
  162  RET

  163  NTA    IfStat                169  169
  168  RET

  169  NTA    WhileStat             175  175
  174  RET

  175  NTA    BreakStat             181  181
  180  RET

  181  NTA    InputStat             187  187
  186  RET

  187  NTA    OutputStat            193  193
  192  RET

  193  NTA    DeleteStat            199  199
  198  RET

  199  NTA    ReturnStat            205  205
  204  RET

  205  NTA    Block                 211  211
  210  RET

  211  T      ';'
  213  RET

-----  Expr  -------------------------------
  214  NT     OrExpr                  1
  217  RET

-----  Term  -------------------------------
  218  NT     NotFact                 1
  221  TA     '*'                   231
  225  NT     NotFact                 2
  228  JMP      221

  231  TA     '/'                   238
  235  JMP      225

  238  TA     '%'                   245
  242  JMP      225

  245  EPS        3
  247  RET

-----  Fact  -------------------------------
  248  TA     false                 253
  252  RET

  253  TA     true                  258
  257  RET

  258  TCA    number                264  264
  263  RET

  264  TCA    ident                 294  294
  269  TA     '['                   279
  273  NT     Expr                    3
  276  T      ']'
  278  RET

  279  TA     '('                   291
  283  NTA    ActParList            288  288
  288  T      ')'
  290  RET

  291  EPS        4
  293  RET

  294  TA     new                   309
  298  NT     Type                    5
  301  T      '['
  303  NT     Expr                    6
  306  T      ']'
  308  RET

  309  T      '('
  311  NT     Expr                    7
  314  T      ')'
  316  RET

-----  ActParList  -------------------------
  317  NT     Expr                    1
  320  TA     ','                   330
  324  NT     Expr                    2
  327  JMP      320

  330  EPS        2
  332  RET

-----  IfStat  -----------------------------
  333  SEM        1
  334  T      if
  336  T      '('
  338  NT     Expr                    2
  341  T      ')'
  343  NT     Stat                    3
  346  EPSA       5         357
  350  SEM        4
  351  T      else
  353  NT     Stat                    5
  356  RET

  357  EPS        6
  359  RET

-----  WhileStat  --------------------------
  360  SEM        1
  361  T      while
  363  T      '('
  365  NT     Expr                    2
  368  T      ')'
  370  NT     Stat                    3
  373  RET

-----  BreakStat  --------------------------
  374  T      break
  376  T      ';'
  378  RET

-----  InputStat  --------------------------
  379  T      cin
  381  T      '>>'
  383  TC     ident                   1
  386  T      ';'
  388  RET

-----  OutputStat  -------------------------
  389  T      cout
  391  T      '<<'
  393  NTA    Expr                  426  426
  398  TA     '<<'                  423
  402  NTA    Expr                  410  410
  407  JMP      398

  410  TCA    string                418  418
  415  JMP      398

  418  T      endl
  420  JMP      398

  423  T      ';'
  425  RET

  426  TCA    string                434  434
  431  JMP      398

  434  T      endl
  436  JMP      398

-----  DeleteStat  -------------------------
  439  T      delete
  441  T      '['
  443  T      ']'
  445  TC     ident                   1
  448  T      ';'
  450  RET

-----  ReturnStat  -------------------------
  451  T      return
  453  NTA    Expr                  458  458
  458  T      ';'
  460  RET

-----  OrExpr  -----------------------------
  461  NT     AndExpr                 1
  464  TA     '||'                  474
  468  NT     AndExpr                 2
  471  JMP      464

  474  EPS        7
  476  RET

-----  AndExpr  ----------------------------
  477  NT     RelExpr                 1
  480  TA     '&&'                  490
  484  NT     RelExpr                 2
  487  JMP      480

  490  EPS        8
  492  RET

-----  RelExpr  ----------------------------
  493  NT     SimpleExpr              1
  496  TA     '=='                  504
  500  NT     SimpleExpr              2
  503  RET

  504  TA     '!='                  511
  508  JMP      500

  511  TA     '<'                   518
  515  JMP      500

  518  TA     '<='                  525
  522  JMP      500

  525  TA     '>'                   532
  529  JMP      500

  532  TA     '>='                  539
  536  JMP      500

  539  EPS        9
  541  RET

-----  SimpleExpr  -------------------------
  542  TA     '+'                   569
  546  NT     Term                    1
  549  TA     '+'                   559
  553  NT     Term                    2
  556  JMP      549

  559  TA     '-'                   566
  563  JMP      553

  566  EPS       10
  568  RET

  569  TA     '-'                   546
  573  JMP      546

-----  NotFact  ----------------------------
  576  TA     '!'                   580
  580  NT     Fact                    1
  583  RET

-----  VarDefOrFuncDeclOrDef  --------------
  584  NT     Type                    1
  587  TA     '*'                   591
  591  TC     ident                   2
  594  NTA    VarDef                600  600
  599  RET

  600  NT     FuncHead                4
  603  TA     ';'                   608
  607  RET

  608  NT     Block                   5
  611  RET

-----  FormParListRest  --------------------
  612  TA     '*'                   616
  616  TC     ident                   1
  619  TA     '['                   625
  623  T      ']'
  625  TA     ','                   648
  629  NT     Type                    2
  632  TA     '*'                   636
  636  TC     ident                   3
  639  TA     '['                   625
  643  T      ']'
  645  JMP      625

  648  EPS        2
  650  RET

-----  NonVoidType  ------------------------
  651  TA     bool                  656
  655  RET

  656  T      int
  658  RET

-----  IdentStat  --------------------------
  659  TC     ident                   1
  662  TA     '++'                  669
  666  T      ';'
  668  RET

  669  TA     '--'                  676
  673  JMP      666

  676  TA     '['                   693
  680  NT     Expr                    2
  683  T      ']'
  685  T      '='
  687  NT     Expr                    3
  690  JMP      666

  693  EPSA      11         700
  697  JMP      685

  700  T      '('
  702  NTA    ActParList            707  707
  707  T      ')'
  709  JMP      666

-----  R o o t  ----------------------------
  712  NT     MiniCPP                 1
  715  T      'end of file'
  717  RET


nonterminals:
============

MiniCPP                   1 del { void, const, int, bool }
ConstDecl                21     { const }
Init                     35     { '=' }
VarDef                   51     { ';', ',', '=' }
FuncHead                 78     { '(' }
FormParList              88     { void, int, bool }
Type                    108     { void, int, bool }
Block                   117     { '{' }
Stat                    156     { return, break, cin, cout, if, while, delete, 
                                ';', '{', ident }
Expr                    214     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
Term                    218     { new, false, true, '!', '(', number, ident }
Fact                    248     { new, false, true, '(', number, ident }
ActParList              317     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
IfStat                  333     { if }
WhileStat               360     { while }
BreakStat               374     { break }
InputStat               379     { cin }
OutputStat              389     { cout }
DeleteStat              439     { delete }
ReturnStat              451     { return }
OrExpr                  461     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
AndExpr                 477     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
RelExpr                 493     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
SimpleExpr              542     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
NotFact                 576     { new, false, true, '!', '(', number, ident }
VarDefOrFuncDeclOrD.    584     { void, int, bool }
FormParListRest         612     { '*', ident }
NonVoidType             651     { int, bool }
IdentStat               659     { ident }


eps look-aheads:
===============

    1   { 'end of file' }
    2   { ')' }
    3   { ';', ',', '+', '-', '||', '&&', '<', '>', '<<', '<=', '>=', '==', '!=', 
        ')', ']' }
    4   { ';', ',', '+', '-', '/', '*', '%', '||', '&&', '<', '>', '<<', '<=', 
        '>=', '==', '!=', ')', ']' }
    5   { else }
    6   { void, return, const, break, int, bool, cin, cout, if, while, else, 
        delete, ';', '{', '}', ident }
    7   { ';', ',', '<<', ')', ']' }
    8   { ';', ',', '||', '<<', ')', ']' }
    9   { ';', ',', '||', '&&', '<<', ')', ']' }
   10   { ';', ',', '||', '&&', '<', '>', '<<', '<=', '>=', '==', '!=', ')', ']' }
   11   { '=' }
