Coco-2 PGT (source: ..\MiniCPP\MiniCPP.atg)



    1| /* Attributed grammar for MiniCPP */
    2| COMPILER MiniCPP
    3| 
    4| SEM<<
    5| 	private static int loc = 0;
    6| 	private static int stc = 0;
    7| 	private static int mc  = 0;
    8| >>
    9| 
   10| 
   11| CHARACTER SETS
   12| 	digit		= '0' .. '9'.
   13| 	letter		= 'a' .. 'z' + 'A' .. 'Z' .
   14| 	whiteSpace	= CHR(9) + EOL IGNORE. /*' ' ignored by default*/
   15| 	noquote		= ANY - '"'.
   16| 
   17| COMMENTS
   18| 	FROM '//' TO EOL.
   19| 	FROM '/*' TO '*/'.
   20| 
   21| KEYWORDS
   22| 	'void'.  'new'. 'return'. 'const'. 'break'.
   23| 	'int'. 'false'. 'true'.  'bool'.
   24| 	'scanf'. 'printf'. 'cin'. 'cout'. 'endl'.
   25| 	'if'. 'while'.  'else'. 'for'. 'delete'.
   26| 
   27| TOKENS
   28| 	';'. ','.
   29| 	'='. '+'. '-'. '++'. '--'. '/'. '*'. '%'.
   30| 	'||'. '&&'. '<'. '>'. '<<'. '>>'. '<='. '>='. '=='. '!='. '!'.
   31| 	'('. ')'. '['. ']'. '{'. '}'.
   32| 
   33| TOKEN CLASSES
   34| 	number = digit { digit }.
   35| 	ident = ( letter | '_' ) { letter | digit | '_' }.
   36| 	string = '"' { noquote } '"'.
   37| 
   38| NONTERMINALS
   39| 	MiniCPP.
   40| 	ConstDecl.
   41| 	Init.
   42| 	VarDef.
   43| 	FuncHead.
   44| 	FormParList.
   45| 	Type.
   46| 	Block.
   47| 	Stat.
   48| 	Expr.
   49| 	Term.
   50| 	Fact.
   51| 	ActParList.
   52| 	IfStat.
   53| 	WhileStat.
   54| 	BreakStat.
   55| 	InputStat.
   56| 	OutputStat.
   57| 	DeleteStat.
   58| 	ReturnStat.
   59| 	OrExpr.
   60| 	AndExpr.
   61| 	RelExpr.
   62| 	SimpleExpr.
   63| 	NotFact.
   64| 	VarDefOrFuncDeclOrDef.
   65| 	FormParListRest.
   66| 	NonVoidType.
   67| 	IdentStat.
   68| 
   69| 	RULES
   70| 
   71| 		MiniCPP               = { ConstDecl | VarDefOrFuncDeclOrDef }
   72| 														SEM<<
   73| 																	Console.WriteLine($"Lines of code: {loc}");
   74| 																  Console.WriteLine($"Lines of statements: {stc}");
   75| 																  Console.WriteLine($"Complexity by McCabe: {mc}");
   76| 														>>.
   77| 		VarDefOrFuncDeclOrDef = Type [ '*' ] ident (VarDef | FuncHead (';' | Block) SEM<<loc++;>>) .
   78| 		ConstDecl             = 'const' Type ident Init ';' SEM<<loc++;>> .
   79| 		Init                  = '=' ( false | true | number ) .
   80| 		VarDef                =	[ Init ] { ',' [ '*' ] ident [ Init ] } ';' SEM<<loc++;>>.
   81| 		FuncHead              = '(' [ FormParList ] ')' .
   82| 		FormParList           =	( 'void' [ FormParListRest ] | NonVoidType FormParListRest ).
   83| 		FormParListRest       = [ '*' ] ident [ '[' ']' ] { ',' Type [ '*' ] ident [ '[' ']' ] } .
   84| 		Type                  = 'void' | NonVoidType .
   85| 		NonVoidType           = 'bool' | 'int' .
   86| 		Block                 =	'{' { ConstDecl | Type [ '*' ] ident VarDef | Stat } '}' SEM<<loc++;>>.
   87| 		Stat                  = ( IdentStat | IfStat | WhileStat | BreakStat | InputStat
   88| 		                        | OutputStat | DeleteStat | ReturnStat | Block | (';' SEM<<stc++;>>) ).
   89| 		IdentStat             =	ident ('++' | '--' | [ '[' Expr ']' ] '=' Expr | '(' [ ActParList ] ')') ';'.
   90| 		ActParList            = Expr { ',' Expr } .
   91| 		IfStat                = 'if' '(' Expr ')' Stat [ 'else' Stat SEM<<mc++;>>] SEM<<loc++;mc++;>>.
!WRN!                                                     ^LL(1) error (start AND succ): else
   92| 		WhileStat             = 'while' '(' Expr ')' Stat .
   93| 		BreakStat             = 'break' ';' .
   94| 		InputStat             = 'cin'  '>>' ident ';' .
   95| 		OutputStat            = 'cout' '<<' ( Expr | string | 'endl' ) { '<<' ( Expr | string | 'endl' ) } ';' .
   96| 		DeleteStat            = 'delete' '[' ']' ident ';' .
   97| 		ReturnStat            = 'return' [ Expr ] ';' .
   98| 		Expr                  =	OrExpr .
   99| 		OrExpr                = AndExpr { '||' AndExpr } .
  100| 		AndExpr               = RelExpr { '&&' RelExpr } .
  101| 		RelExpr               =	SimpleExpr [ ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) SimpleExpr ] .
  102| 		SimpleExpr            = [ '+' | '-' ] Term { ( '+' | '-' ) Term } .
  103| 		Term                  = NotFact { ( '*' | '/' | '%' )  NotFact } .
  104| 		NotFact               = [ '!' ] Fact .
  105| 		Fact                  = 'false'
  106| 		                        | 'true'
  107| 														| number
  108| 														| ident [ ( '[' Expr ']' )
  109| 														| ( '(' [ ActParList ] ')' ) ]
  110| 														| 'new' Type '[' Expr ']'
  111| 														| '(' Expr ')' .
  112| 
  113| 	END MiniCPP.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    1 warning(s)       


statistics:
----------

   49 terminals
   29 nonterminals
  114 alternatives
  196 nodes in top-down graph
   10 eps sets (with look ahead)
    1 any sets

  719 bytes G-code

deletable nonterminal(s):
------------------------

  MiniCPP


G-code:

======

-----  MiniCPP  ----------------------------
    1  NTA    ConstDecl               9    9
    6  JMP        1

    9  NTA    VarDefOrFuncDeclOrD.   17   17
   14  JMP        1

   17  EPS        1
   19  SEM        3
   20  RET

-----  ConstDecl  --------------------------
   21  T      const
   23  NT     Type                    1
   26  TC     ident                   2
   29  NT     Init                    3
   32  T      ';'
   34  SEM        4
   35  RET

-----  Init  -------------------------------
   36  T      '='
   38  TA     false                  43
   42  RET

   43  TA     true                   48
   47  RET

   48  TC     number                  1
   51  RET

-----  VarDef  -----------------------------
   52  NTA    Init                   57   57
   57  TA     ','                    76
   61  TA     '*'                    65
   65  TC     ident                   2
   68  NTA    Init                   57   57
   73  JMP       57

   76  T      ';'
   78  SEM        4
   79  RET

-----  FuncHead  ---------------------------
   80  T      '('
   82  NTA    FormParList            87   87
   87  T      ')'
   89  RET

-----  FormParList  ------------------------
   90  TA     void                  103
   94  NTA    FormParListRest       100  100
   99  RET

  100  EPS        2
  102  RET

  103  NT     NonVoidType             2
  106  NT     FormParListRest         3
  109  RET

-----  Type  -------------------------------
  110  TA     void                  115
  114  RET

  115  NT     NonVoidType             1
  118  RET

-----  Block  ------------------------------
  119  T      '{'
  121  NTA    ConstDecl             129  129
  126  JMP      121

  129  NTA    Type                  147  147
  134  TA     '*'                   138
  138  TC     ident                   3
  141  NT     VarDef                  4
  144  JMP      121

  147  NTA    Stat                  155  155
  152  JMP      121

  155  T      '}'
  157  SEM        6
  158  RET

-----  Stat  -------------------------------
  159  NTA    IdentStat             165  165
  164  RET

  165  NTA    IfStat                171  171
  170  RET

  171  NTA    WhileStat             177  177
  176  RET

  177  NTA    BreakStat             183  183
  182  RET

  183  NTA    InputStat             189  189
  188  RET

  189  NTA    OutputStat            195  195
  194  RET

  195  NTA    DeleteStat            201  201
  200  RET

  201  NTA    ReturnStat            207  207
  206  RET

  207  NTA    Block                 213  213
  212  RET

  213  T      ';'
  215  SEM       10
  216  RET

-----  Expr  -------------------------------
  217  NT     OrExpr                  1
  220  RET

-----  Term  -------------------------------
  221  NT     NotFact                 1
  224  TA     '*'                   234
  228  NT     NotFact                 2
  231  JMP      224

  234  TA     '/'                   241
  238  JMP      228

  241  TA     '%'                   248
  245  JMP      228

  248  EPS        3
  250  RET

-----  Fact  -------------------------------
  251  TA     false                 256
  255  RET

  256  TA     true                  261
  260  RET

  261  TCA    number                267  267
  266  RET

  267  TCA    ident                 297  297
  272  TA     '['                   282
  276  NT     Expr                    3
  279  T      ']'
  281  RET

  282  TA     '('                   294
  286  NTA    ActParList            291  291
  291  T      ')'
  293  RET

  294  EPS        4
  296  RET

  297  TA     new                   312
  301  NT     Type                    5
  304  T      '['
  306  NT     Expr                    6
  309  T      ']'
  311  RET

  312  T      '('
  314  NT     Expr                    7
  317  T      ')'
  319  RET

-----  ActParList  -------------------------
  320  NT     Expr                    1
  323  TA     ','                   333
  327  NT     Expr                    2
  330  JMP      323

  333  EPS        2
  335  RET

-----  IfStat  -----------------------------
  336  T      if
  338  T      '('
  340  NT     Expr                    1
  343  T      ')'
  345  NT     Stat                    2
  348  TA     else                  356
  352  NT     Stat                    3
  355  SEM        4
  356  EPS        5
  358  SEM        5
  359  RET

-----  WhileStat  --------------------------
  360  T      while
  362  T      '('
  364  NT     Expr                    1
  367  T      ')'
  369  NT     Stat                    2
  372  RET

-----  BreakStat  --------------------------
  373  T      break
  375  T      ';'
  377  RET

-----  InputStat  --------------------------
  378  T      cin
  380  T      '>>'
  382  TC     ident                   1
  385  T      ';'
  387  RET

-----  OutputStat  -------------------------
  388  T      cout
  390  T      '<<'
  392  NTA    Expr                  425  425
  397  TA     '<<'                  422
  401  NTA    Expr                  409  409
  406  JMP      397

  409  TCA    string                417  417
  414  JMP      397

  417  T      endl
  419  JMP      397

  422  T      ';'
  424  RET

  425  TCA    string                433  433
  430  JMP      397

  433  T      endl
  435  JMP      397

-----  DeleteStat  -------------------------
  438  T      delete
  440  T      '['
  442  T      ']'
  444  TC     ident                   1
  447  T      ';'
  449  RET

-----  ReturnStat  -------------------------
  450  T      return
  452  NTA    Expr                  457  457
  457  T      ';'
  459  RET

-----  OrExpr  -----------------------------
  460  NT     AndExpr                 1
  463  TA     '||'                  473
  467  NT     AndExpr                 2
  470  JMP      463

  473  EPS        6
  475  RET

-----  AndExpr  ----------------------------
  476  NT     RelExpr                 1
  479  TA     '&&'                  489
  483  NT     RelExpr                 2
  486  JMP      479

  489  EPS        7
  491  RET

-----  RelExpr  ----------------------------
  492  NT     SimpleExpr              1
  495  TA     '=='                  503
  499  NT     SimpleExpr              2
  502  RET

  503  TA     '!='                  510
  507  JMP      499

  510  TA     '<'                   517
  514  JMP      499

  517  TA     '<='                  524
  521  JMP      499

  524  TA     '>'                   531
  528  JMP      499

  531  TA     '>='                  538
  535  JMP      499

  538  EPS        8
  540  RET

-----  SimpleExpr  -------------------------
  541  TA     '+'                   568
  545  NT     Term                    1
  548  TA     '+'                   558
  552  NT     Term                    2
  555  JMP      548

  558  TA     '-'                   565
  562  JMP      552

  565  EPS        9
  567  RET

  568  TA     '-'                   545
  572  JMP      545

-----  NotFact  ----------------------------
  575  TA     '!'                   579
  579  NT     Fact                    1
  582  RET

-----  VarDefOrFuncDeclOrDef  --------------
  583  NT     Type                    1
  586  TA     '*'                   590
  590  TC     ident                   2
  593  NTA    VarDef                599  599
  598  RET

  599  NT     FuncHead                4
  602  TA     ';'                   608
  606  SEM        6
  607  RET

  608  NT     Block                   5
  611  JMP      606

-----  FormParListRest  --------------------
  614  TA     '*'                   618
  618  TC     ident                   1
  621  TA     '['                   627
  625  T      ']'
  627  TA     ','                   650
  631  NT     Type                    2
  634  TA     '*'                   638
  638  TC     ident                   3
  641  TA     '['                   627
  645  T      ']'
  647  JMP      627

  650  EPS        2
  652  RET

-----  NonVoidType  ------------------------
  653  TA     bool                  658
  657  RET

  658  T      int
  660  RET

-----  IdentStat  --------------------------
  661  TC     ident                   1
  664  TA     '++'                  671
  668  T      ';'
  670  RET

  671  TA     '--'                  678
  675  JMP      668

  678  TA     '['                   695
  682  NT     Expr                    2
  685  T      ']'
  687  T      '='
  689  NT     Expr                    3
  692  JMP      668

  695  EPSA      10         702
  699  JMP      687

  702  T      '('
  704  NTA    ActParList            709  709
  709  T      ')'
  711  JMP      668

-----  R o o t  ----------------------------
  714  NT     MiniCPP                 1
  717  T      'end of file'
  719  RET


nonterminals:
============

MiniCPP                   1 del { void, const, int, bool }
ConstDecl                21     { const }
Init                     36     { '=' }
VarDef                   52     { ';', ',', '=' }
FuncHead                 80     { '(' }
FormParList              90     { void, int, bool }
Type                    110     { void, int, bool }
Block                   119     { '{' }
Stat                    159     { return, break, cin, cout, if, while, delete, 
                                ';', '{', ident }
Expr                    217     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
Term                    221     { new, false, true, '!', '(', number, ident }
Fact                    251     { new, false, true, '(', number, ident }
ActParList              320     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
IfStat                  336     { if }
WhileStat               360     { while }
BreakStat               373     { break }
InputStat               378     { cin }
OutputStat              388     { cout }
DeleteStat              438     { delete }
ReturnStat              450     { return }
OrExpr                  460     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
AndExpr                 476     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
RelExpr                 492     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
SimpleExpr              541     { new, false, true, '+', '-', '!', '(', number, 
                                ident }
NotFact                 575     { new, false, true, '!', '(', number, ident }
VarDefOrFuncDeclOrD.    583     { void, int, bool }
FormParListRest         614     { '*', ident }
NonVoidType             653     { int, bool }
IdentStat               661     { ident }


eps look-aheads:
===============

    1   { 'end of file' }
    2   { ')' }
    3   { ';', ',', '+', '-', '||', '&&', '<', '>', '<<', '<=', '>=', '==', '!=', 
        ')', ']' }
    4   { ';', ',', '+', '-', '/', '*', '%', '||', '&&', '<', '>', '<<', '<=', 
        '>=', '==', '!=', ')', ']' }
    5   { void, return, const, break, int, bool, cin, cout, if, while, else, 
        delete, ';', '{', '}', ident }
    6   { ';', ',', '<<', ')', ']' }
    7   { ';', ',', '||', '<<', ')', ']' }
    8   { ';', ',', '||', '&&', '<<', ')', ']' }
    9   { ';', ',', '||', '&&', '<', '>', '<<', '<=', '>=', '==', '!=', ')', ']' }
   10   { '=' }
