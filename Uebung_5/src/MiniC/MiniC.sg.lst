Coco-2 SG (source: ..\MiniC\MiniC.atg)

    1| /* Comments are allowed here. COMPILER name is the same name as the file */
    2| COMPILER MiniC
    3| 
    4| SEM<<
    5|   private static String identStr;
    6|   private static int   numberVal;
    7| >>
    8| 
    9| CHARACTER SETS
   10|   letter = 'A' .. 'Z' + 'a' .. 'z' + '_'.
   11|   digit  = '0' ..'9'.
   12|   ignore = CHR(9) + EOL IGNORE.
   13| 
   14| KEYWORDS
   15|   'int'.
   16|   'main'.
   17|   'printf'.
   18|   'scanf'.
   19|   'void'.
   20| 
   21| TOKENS
   22|   '+'.
   23|   '-'.
   24|   '*'.
   25|   '/'.
   26|   '('.
   27|   ')'.
   28|   '{'.
   29|   '}'.
   30|   ','.
   31|   '='.
   32|   ';'.
   33| 
   34| TOKEN CLASSES
   35|   ident  << out String identStr >> =
   36|     letter {letter | digit} LEX << identStr = tokenStr; >>.
   37|   number << out int numberVal >> =
   38|     digit {digit} LEX << numberVal=Convert.ToInt32(tokenStr); >>.
   39| 
   40| NONTERMINALS
   41|   MiniC.
   42|   VarDecl.
   43|   StatSeq.
   44|   Stat.
   45|   Expr.
   46|   Term.
   47|   Fact.
   48| 
   49| RULES
   50|   MiniC   = 'void' 'main' '(' ')' '{'  [ VarDecl ] StatSeq '}'.
   51|   VarDecl = 'int' ident<< out identStr >> { ',' ident<< out identStr >> } ';'.
   52|   StatSeq = Stat { Stat } .
   53|   Stat    = [ ident << out identStr >> '=' Expr
   54|             | 'scanf'  '(' ident<< out  identStr >> ')'
   55|             | 'printf' '(' Expr  ')'
   56|             ] ';' .
   57|   Expr    = Term { ( '+' | '-' ) Term } .
   58|   Term    = Fact { ( '*' | '/' ) Fact } .
   59|   Fact    = ident<< out identStr >> | number << out numberVal >> | '(' Expr ')' .
   60| 
   61| END MiniC.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


start table:
-----------

   '('                     6 | ')'                       7
   '*'                     4 | '+'                       2
   ','                    10 | '-'                       3
   '/'                     5 | '0'..'9'                 14
   ';'                    12 | '='                      11
   'A'..'Z'               13 | '_'                      13
   'a'                    15 | 'b'                      13
   'c'..'d'               15 | 'e'                      13
   'f'                    15 | 'g'..'h'                 13
   'i'                    15 | 'j'..'l'                 13
   'm'..'p'               15 | 'q'                      13
   'r'..'t'               15 | 'u'                      13
   'v'                    15 | 'w'..'z'                 13
   '{'                     8 | '}'                       9
   ELSE                    0 | 

ignored characters:
------------------

{ HT..LF, ' ' }

comment starts:
--------------

{ }

character classes:
-----------------

1: { 'A'..'Z', '_', 'a'..'z' }

2: { '0'..'9' }

3: { 'a', 'c'..'d', 'f', 'i', 'm'..'p', 'r'..'t', 'v' }

4: { 'A'..'Z', '_', 'b', 'e', 'g'..'h', 'j'..'l', 'q', 'u', 'w'..'z' }
