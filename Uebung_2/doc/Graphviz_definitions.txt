-- Regulär Grammar --
digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; S E;
	node [shape = circle];
	S -> A [ label = "b" ];
	S -> B [ label = "a" ];
	A -> A [ label = "b" ];
	B -> C [ label = "b" ];
	C -> B [ label = "a" ];
	A -> E [ label = "b" ];
	B -> E [ label = "b" ];
}

-- Ada State machine
digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; E;
	node [shape = circle] S D;
        node [shape = point ]; START
        START -> S;
        S -> E  [ label = "l" ];
        E -> E  [ label = "l,d" ];
        E -> D  [ label = "-" ];
        D -> E  [ label = "l,d" ];
}

-- Transformed to state machine regulär expression
digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; A C F;
	node [shape = circle] S D E;
        node [shape = point ]; START
        START -> S;
        S -> A  [ label = "a" ];
        A -> A  [ label = "a" ];
        S -> E  [ label = "a" ];
        E -> C  [ label = "b" ];
        C -> E  [ label = "a" ];
        C -> D  [ label = "b" ];
        S -> D  [ label = "b" ];
        D -> F  [ label = "a" ];
        F -> D  [ label = "b" ];
}

-- Tranformed non-determenistic to deterministic state machine
digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; AB A C E;
	node [shape = circle] S D B;
        node [shape = point ]; START
        START -> S;
        S -> AB  [ label = "a" ];
        AB -> A  [ label = "a" ];
        A -> A  [ label = "a" ];
        AB -> C  [ label = "b" ];
        C -> B  [ label = "a" ];
        B -> C  [ label = "b" ];
        C -> D  [ label = "b" ];
        S -> D  [ label = "b" ];
        D -> E  [ label = "a" ];
        E -> D  [ label = "b" ];
}

-- 0 1 chains mod 3 == 0
digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; R0;
	node [shape = circle] R1 R2;
	node [shape = point] START;
        START -> R0
	R0   -> R0 [label = "0"];
	R0   -> R1 [label = "1"];
	R1   -> R0 [label = "1"];
	R1   -> R2 [label = "0"];
	R2   -> R1 [label = "0"];
	R2   -> R2 [label = "1"];
}